#pragma once

#ifndef CHARACTVECT_H
#define CHARACTVECT_H

// generic define
#include "GEIMDef.h"

class CharactVect
{
public:
	CharactVect();
	virtual ~CharactVect();

	/** \brief match main entry
	 *
	 * \param stMtPair ST_MTPAIR&&	[IN] two gel images to match, and their sopt infomation
	 * \param pstMtRet ST_MTRESULT*	[IN] match result
	 * \return bool true:success false:failed
	 *
	 */
	bool CVMain(ST_MTPAIR&& stMtPair, ST_MTRESULT* pstMtRet);

	/** \brief destroy the match result
	 *
	 * \param pRst PST_MTRESULT	[IN] the result struct
	 * \return bool true:success false:failed
	 *
	 */
	static bool DestroyResult(PST_MTRESULT pRst);

protected:

private:
	/** \brief normalization the image
	 *
	 * \param stParam ST_MTPARAM&	[IN] the image's param
	 * \return bool	true:success false:failed
	 *
	 */
	bool Normalize(ST_MTPARAM& stParam);
	/** \brief calculate charact-vector for the image's spotd
	 *
	 * \param stParam ST_MTPARAM&
	 * \return bool
	 *
	 */
	bool CalcuCharacr(ST_MTPARAM& stParam);

	/** \brief traverse one spot's pixels
	 *
	 * \param stParam ST_MTPARAM&	[IN] image
	 * \param spot ST_SPOT_NODE&	[IN] spot
	 * \param __f _Func				[IN] the callback function
	 * \return bool
	 *
	 * _Func: bool XXX(int id);
	 *
	 */
	template<typename _Func>
	bool SpotPixs(ST_MTPARAM& stParam, ST_SPOT_NODE& spot, _Func __f);

	/** \brief match use the vector-bbf method
	 *
	 ** \return bool true:success
	 *
	 * match result in m_pstMtRet
	 */
	bool VectMatch();
	/** \brief transform my spot attrib format to feature array
	 *
	 * \param feats ST_FEATURE *&	[OUT] the feature array, alloc memory inside
	 * \param num int&				[OUT] items' number in feature array
	 * \param attr const VT_ATTR*	[IN] my spot attribute format: vector
	 * \return bool true:success
	 *
	 */
	bool feat_generate(ST_FEATURE *& feats, int &num, const VT_ATTR *attr);
	/** \brief find another set spots' match part in feature array
	 *
	 * \param pairs VT_SPAIR*		[OUT] match result
	 * \param feats ST_FEATURE*		[IN] feature array generated by feat_generate
	 * \param num int				[IN] items' number of feature array
	 * \param attr const VT_ATTR*	[IN] another spot attribute set
	 * \return bool	true:success
	 *
	 */
	bool feat_bbf(VT_SPAIR* pairs, ST_FEATURE *feats, int num, const VT_ATTR *attr);
	/** \brief release memory allocated in feat_generate
	 *
	 * \param feats ST_FEATURE *&	[INOUT] the feature array to be release
	 * \return void
	 *
	 */
	void feat_release(ST_FEATURE *& feats);

	/**< param for image A */
	ST_MTPARAM m_stParamA;
	/**< param for image B */
	ST_MTPARAM m_stParamB;

	/**< match result */
	ST_MTRESULT* m_pstMtRet = nullptr;
};

#endif // CHARACTVECT_H
